{
  "name": "overv.io tutorial",
  "tagline": "Tutorial using example repo used to illustrate git issues and overv.io. Written by Madi Flannery, 23/05/16.",
  "body": "# Note: There is a test repo and overv.io [here](https://overv.io/madiflannery/proj_management_test/). Feel free to use this as a playground for any of the concepts mentioned below.\r\n\r\n### Overview of overv.io and git issues\r\nOverv.io is a layer that sits on top of Git, allowing for easy management of issues. The idea: for each feature or bug, an issue is created on an appropriate git repo. Each issue can be assigned to a person, and has tags which are used to keep track of what it is (e.g. 'enhancement' or 'bug'), what its status is (e.g. 'in progress', 'in test'), and other miscellaneous things (e.g. 'question', 'duplicate', 'urgent', etc). Each issue can also be associated with a 'milestone', which is just a collection of issues for a particular release. Each milestone can have a date of when it should be completed by. If an issue isn't assigned to a milestone, it by default lives in the 'backlog'. \r\n\r\n### The overv.io interface\r\nA project home page will by default show the 'board' - this is where all the issues live. You can see that the issues are split into their respective milestones. If a milestone has a due date, it will be displayed next to it's name. Issues with no photo on the left are unassigned. Anything highlighted in light yellow is assigned to you. Each issue also has the name, the issue number, who created the issue, how long ago it was created, and any labels/tags for that issue. \r\n\r\n<IMAGE HERE>\r\n\r\nThe same issues can also be accessed from github directly [here](https://github.com/madiflannery/proj_management_test/issues)\r\n\r\n<IMAGE OF GIT HERE>\r\n\r\n### Flow\r\nYou'll also see that there are 4 different statuses an issue can have. These are known as swim lanes. This is like the 'life cycle' for the issue.\r\n1. New - this is where issues start. Work hasn't commenced on them yet, and they may be unassigned.\r\n2. In progress - work has commenced on the issue, whoever is working on it should assign it to themselves. Issues can't be assigned to multiple people, so I propose that we either leave them unassigned (and potentially put whose working on it in the comments), or assign it to whoever is doing the majority of the work (open to suggestions on this). \r\n3. Ready for test - as the name suggests, this means the issue is done but needs to be tested. Note that this may not apply to every issue, but is there if it's needed.\r\n4. Closed - this means the issue is completed and tested.\r\n\r\nTo change the status of an issue, just click and drag it to the appropriate lane.\r\n\r\n### Labels\r\nEach issue should be labelled appropriately so it's easy to track its status. The labels are shown in the screenshot below.\r\n\r\n<SCREENSHOT HERE>\r\n\r\nAs you move issues through the swim lanes, the appropriate labels will be added/removed.\r\nThe other commonly used labels will be 'enhancement', which is used to say an issue is a feature, and 'bug', which is used to say an issue is a bug. The labels 'urgent' and 'low priority' can be used to give extra info about timeframes.\r\n\r\n### Milestones\r\nMilestones are a collection of issues for a particular release (e.g. v4.1). Each milestone can have a date of when it should be completed by (this is optional). If an issue isn't assigned to a milestone, it by default lives in the 'backlog', which is generally where issues will be taken from to form a new release/milestone.\r\n\r\nNote that a milestone doesn't necessarily have to be a release - it could just be a collection of tasks you want done by a particular date (e.g. issues you want fixed before GCC). Most often they are releases though.\r\n\r\nAll milestones can be viewed by clicking on 'milestones' on the left hand side of the screen.\r\n\r\n<SCREEN SHOT OF OVERVIO MILESTONES>\r\n\r\nThey can also be viewed in github by going issues -> milestones (see [here](https://github.com/madiflannery/proj_management_test/milestones)).\r\n\r\n<SCREENSHOT OF GIT MILESTONES>\r\n\r\n### Editing an existing issue / adding comments\r\n\r\n### creating a new milestone\r\n\r\n### Reporting a new issue or requesting a new feature\r\n\r\n### Hate it?\r\nThis is the best part about using git issues - all the data lives on git, so if you hate overv.io you can use git directly, or another git issues management tool of your choice (e.g. waffle.io) - just ensure it's set up identically to our setup so things don't get messy.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}